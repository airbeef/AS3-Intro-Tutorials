package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;	public class Main_BugCatcher extends MovieClip	{		private var _collectionJar:Array;		private var _mouseFound:Boolean;				public function Main_BugCatcher()		{			addEventListener(Event.ENTER_FRAME, onEnterFrame);			frog.addEventListener(Event.ENTER_FRAME, onFrogLook);						setChildIndex(water, numChildren - 1);			setChildIndex(player, numChildren - 2);			for (var i:int = 0; i < numChildren; i++)			{				trace(i + ". " + getChildAt(i).name);			}						//Initialize objects			//fly			fly.vx = 0;			fly.vy = 0;			fly.addEventListener(Event.ENTER_FRAME, onBugMove);			fly.addEventListener(Event.ENTER_FRAME, onCollisionWithPlayer);						//bee			bee.vx = 0;			bee.vy = 0;			bee.addEventListener(Event.ENTER_FRAME, onBugMove);			bee.addEventListener(Event.ENTER_FRAME, onCollisionWithPlayer);						//mosquito			mosquito.vx = 0;			mosquito.vy = 0;			mosquito.addEventListener(Event.ENTER_FRAME, onBugMove);			mosquito.addEventListener(Event.ENTER_FRAME, onCollisionWithPlayer);						//mouse			mouse.addEventListener(Event.ENTER_FRAME, onCollisionWithPlayer);						//Initialize array and variables			_collectionJar = new Array();			_collectionJar = [];			_mouseFound = false;			instructions.text = "Catch 3 bugs for the frog."		}		private function onEnterFrame(event:Event):void		{			//Player vs platform collision			for (var i:int = 0; i <= 9; i++)			{				Collision.playerAndPlatform(player, this["platform" + i], 0.2, 0);				//trace("platform" + i);			}		}				private function onFrogLook(event:Event):void		{			//Convert points from local to global coordinates			//Right eye			var frogsRightEye:Point = new Point(frog.rightEye.x, frog.rightEye.y);			var frogsRightEye_X:Number = frog.localToGlobal(frogsRightEye).x;			var frogsRightEye_Y:Number = frog.localToGlobal(frogsRightEye).y;			//Left eye			var frogsLeftEye:Point=new Point(frog.leftEye.x,frog.leftEye.y);			var frogsLeftEye_X:Number=frog.localToGlobal(frogsLeftEye).x;			var frogsLeftEye_Y:Number=frog.localToGlobal(frogsLeftEye).y;			//Rotate eyes			frog.rightEye.rotation = Math.atan2(frogsRightEye_Y - player.y, frogsRightEye_X - player.x) * (180/Math.PI);			frog.leftEye.rotation = Math.atan2(frogsLeftEye_Y - player.y, frogsLeftEye_X - player.x) * (180/Math.PI);		}				private function onBugMove(event:Event):void		{			//Create a variable to store a reference to the bug object			var bug:MovieClip = event.target as MovieClip;						//Add Brownian motion to the velocities			bug.vx += (Math.random() * 0.2 - 0.1) * 15;			bug.vy += (Math.random() * 0.2 - 0.1) * 15;						//Add some friction			bug.vx *= 0.95;			bug.vy *= 0.95;						//Move the bug			bug.x += bug.vx;			bug.y += bug.vy;			//Stage Boundaries			if (bug.x > stage.stageWidth)			{				bug.x = stage.stageWidth;				//Reverse (bounce) bug's velocity when it hits the stage edges				bug.vx*=-1;			}			if (bug.x < 0)			{				bug.x = 0;				bug.vx *= -1;			}						//Keep the bug above the water			if (bug.y > stage.stageHeight - 35)			{				bug.y = stage.stageHeight - 35;				bug.vy *= -1;			}			if (bug.y < 0)			{				bug.y = 0;				bug.vy *= -1;			}						//Apply collision with platform			for (var i:int = 0; i <= 9; i++)			{				Collision.playerAndPlatform(bug, this["platform" + i],0,0);			}						//Artificial intelligence			//Frog			if ((Math.abs(bug.x - frog.x) < 50)   )			{				if (Math.abs(bug.y - frog.y) < 50)				{					bug.x += -bug.vx;					bug.y += -bug.vy;					bug.vx *= -1;					bug.vy *= -1;					//trace(bug.name + ": Frog!");				}			}						//Player			if ((Math.abs(bug.x - player.x) < 60)   )			{				if (Math.abs(bug.y - player.y) < 60)				{					//If the player is moving...					bug.vy += player.vy + ((Math.random() * 0.2 - 0.1) * 30);					bug.vx += player.vx + ((Math.random() * 0.2 - 0.1) * 30);					//trace(bug.name + ": Cat!");					if ((Math.abs(player.vy) < 1) && (Math.abs(player.vx) <1 ))					{						//If the player is sitting still...						bug.y += -bug.vy;						bug.x += -bug.vx;						bug.vy *= -1;						bug.vx *= -1;					}				}			}		}				private function onCollisionWithPlayer(event:Event):void		{			var collectionItem:MovieClip = event.target as MovieClip;			if (_collectionJar.length < 3)			{				if (player.hitTestPoint(collectionItem.x, collectionItem.y, true))				{					this["itemBox" + _collectionJar.length].addChild(collectionItem);					collectionItem.x = 0;					collectionItem.y = 0;					_collectionJar.push(collectionItem);					//Remove listeners of collected items					if (_collectionJar.length == 3) 					{						addEventListener(Event.ENTER_FRAME, onEndGame);					}					if (collectionItem != mouse)					{						collectionItem.removeEventListener(Event.ENTER_FRAME, onBugMove);					}					collectionItem.removeEventListener(Event.ENTER_FRAME, onCollisionWithPlayer);					//trace("Bugs Collected: " + _collectionJar);				}			}		}		private function onEndGame(event:Event):void		{			instructions.text = "Vist the frog to tell him what you've collected.";			if (player.collisionArea.hitTestObject(frog))			{				for (var i:int = 0; i<_collectionJar.length; i++)				{					if (_collectionJar[i] == mouse)					{						_mouseFound = true;						break;					}				}				if (_mouseFound)				{					instructions.text = "I don't like mice!";				}				else				{					instructions.text = "Thanks very much!";				}				removeEventListener(Event.ENTER_FRAME, onEndGame);			}		}	}}